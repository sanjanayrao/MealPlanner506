{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\sanja\\\\code\\\\506\\\\new\\\\MealPlanner506\\\\MealPlanner\\\\components\\\\SwipeRow.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nvar event = Animated.event,\n    cond = Animated.cond,\n    Value = Animated.Value,\n    block = Animated.block,\n    set = Animated.set,\n    eq = Animated.eq,\n    not = Animated.not,\n    clockRunning = Animated.clockRunning,\n    and = Animated.and,\n    startClock = Animated.startClock,\n    stopClock = Animated.stopClock,\n    spring = Animated.spring,\n    greaterThan = Animated.greaterThan,\n    lessThan = Animated.lessThan,\n    call = Animated.call,\n    Clock = Animated.Clock;\n\nvar SwipeRow = function (_React$Component) {\n  _inherits(SwipeRow, _React$Component);\n\n  var _super = _createSuper(SwipeRow);\n\n  function SwipeRow() {\n    var _this;\n\n    _classCallCheck(this, SwipeRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.clock = new Clock();\n    _this.gestureState = new Value(GestureState.UNDETERMINED);\n    _this.animState = {\n      finished: new Value(0),\n      position: new Value(0),\n      velocity: new Value(0),\n      time: new Value(0)\n    };\n    _this.animConfig = {\n      toValue: new Value(0),\n      damping: 20,\n      mass: 0.2,\n      stiffness: 100,\n      overshootClamping: false,\n      restSpeedThreshold: 0.2,\n      restDisplacementThreshold: 0.2\n    };\n    _this.onHandlerStateChange = event([{\n      nativeEvent: function nativeEvent(_ref) {\n        var state = _ref.state;\n        return block([set(_this.gestureState, state), cond(and(eq(state, GestureState.END), not(clockRunning(_this.clock))), startClock(_this.clock))]);\n      }\n    }]);\n    _this.onPanEvent = event([{\n      nativeEvent: function nativeEvent(_ref2) {\n        var translationX = _ref2.translationX;\n        return block([cond(eq(_this.gestureState, GestureState.ACTIVE), [set(_this.animState.position, translationX), cond(lessThan(translationX, _this.props.swipeThreshold), call([_this.animState.position], function () {\n          return _this.props.onSwipe(_this.props.item);\n        }))])]);\n      }\n    }]);\n    return _this;\n  }\n\n  _createClass(SwipeRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var children = this.props.children;\n      return React.createElement(PanGestureHandler, {\n        minDeltaX: 10,\n        onGestureEvent: this.onPanEvent,\n        onHandlerStateChange: this.onHandlerStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }\n      }, React.createElement(Animated.View, {\n        style: {\n          flex: 1,\n          transform: [{\n            translateX: this.animState.position\n          }]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.Code, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, function () {\n        return block([cond(clockRunning(_this2.clock), [spring(_this2.clock, _this2.animState, _this2.animConfig), cond(_this2.animState.finished, [stopClock(_this2.clock), set(_this2.animState.finished, 0)])])]);\n      }), children));\n    }\n  }]);\n\n  return SwipeRow;\n}(React.Component);\n\nexport default SwipeRow;","map":{"version":3,"sources":["C:/Users/sanja/code/506/new/MealPlanner506/MealPlanner/components/SwipeRow.js"],"names":["React","PanGestureHandler","State","GestureState","Animated","event","cond","Value","block","set","eq","not","clockRunning","and","startClock","stopClock","spring","greaterThan","lessThan","call","Clock","SwipeRow","clock","gestureState","UNDETERMINED","animState","finished","position","velocity","time","animConfig","toValue","damping","mass","stiffness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","onHandlerStateChange","nativeEvent","state","END","onPanEvent","translationX","ACTIVE","props","swipeThreshold","onSwipe","item","children","flex","transform","translateX","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { View } from 'react-native';\r\nimport {\r\n  PanGestureHandler,\r\n  State as GestureState,\r\n} from 'react-native-gesture-handler';\r\nimport Animated from 'react-native-reanimated';\r\n\r\n\r\n// NOTE: this implementation is based off of a medium post tutorial on swipeable carde\r\n// https://snack.expo.io/@computerjazz/swipetodelete-rngh-reanimated\r\n\r\nconst {\r\n  event,\r\n  cond,\r\n  Value,\r\n  block,\r\n  set,\r\n  eq,\r\n  not,\r\n  clockRunning,\r\n  and,\r\n  startClock,\r\n  stopClock,\r\n  spring,\r\n  greaterThan,\r\n  lessThan,\r\n  call,\r\n  Clock,\r\n} = Animated;\r\n\r\nclass SwipeRow extends React.Component {\r\n  clock = new Clock();\r\n  gestureState = new Value(GestureState.UNDETERMINED);\r\n  animState = {\r\n    finished: new Value(0),\r\n    position: new Value(0),\r\n    velocity: new Value(0),\r\n    time: new Value(0),\r\n  };\r\n\r\n  // Spring animation config\r\n  // Determines how \"springy\" row is when it\r\n  // snaps back into place after released\r\n  animConfig = {\r\n    toValue: new Value(0),\r\n    damping: 20,\r\n    mass: 0.2,\r\n    stiffness: 100,\r\n    overshootClamping: false,\r\n    restSpeedThreshold: 0.2,\r\n    restDisplacementThreshold: 0.2,\r\n  };\r\n\r\n  // Called whenever gesture state changes. (User begins/ends pan,\r\n  // or if the gesture is cancelled/fails for some reason)\r\n  onHandlerStateChange = event([\r\n    {\r\n      nativeEvent: ({ state }) =>\r\n        block([\r\n          // Update our animated value that tracks gesture state\r\n          set(this.gestureState, state),\r\n          // Spring row back into place when user lifts their finger before reaching threshold\r\n          cond(\r\n            and(eq(state, GestureState.END), not(clockRunning(this.clock))),\r\n            startClock(this.clock)\r\n          ),\r\n        ]),\r\n    },\r\n  ]);\r\n\r\n  onPanEvent = event([\r\n    {\r\n      nativeEvent: ({ translationX }) =>\r\n        block([\r\n          cond(eq(this.gestureState, GestureState.ACTIVE), [\r\n            // Update our translate animated value as the user pans\r\n            set(this.animState.position, translationX),\r\n            // If swipe distance exceeds threshold, delete item\r\n            cond(\r\n              lessThan(translationX, this.props.swipeThreshold),\r\n              call([this.animState.position], () =>\r\n                this.props.onSwipe(this.props.item)\r\n              )\r\n            ),\r\n          ]),\r\n        ]),\r\n    },\r\n  ]);\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <PanGestureHandler\r\n        minDeltaX={10}\r\n        onGestureEvent={this.onPanEvent}\r\n        onHandlerStateChange={this.onHandlerStateChange}>\r\n        <Animated.View\r\n          style={{\r\n            flex: 1,\r\n            transform: [{ translateX: this.animState.position }],\r\n          }}>\r\n          <Animated.Code>\r\n            {() =>\r\n              block([\r\n                // If the clock is running, increment position in next tick by calling spring()\r\n                cond(clockRunning(this.clock), [\r\n                  spring(this.clock, this.animState, this.animConfig),\r\n                  // Stop and reset clock when spring is complete\r\n                  cond(this.animState.finished, [\r\n                    stopClock(this.clock),\r\n                    set(this.animState.finished, 0),\r\n                  ]),\r\n                ]),\r\n              ])\r\n            }\r\n          </Animated.Code>\r\n          {children}\r\n        </Animated.View>\r\n      </PanGestureHandler>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SwipeRow;\r\n"]},"metadata":{},"sourceType":"module"}
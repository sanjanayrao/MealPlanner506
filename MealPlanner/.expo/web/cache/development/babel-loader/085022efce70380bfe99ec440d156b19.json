{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as fb from \"./firebase\";\nimport base64 from 'base-64';\nimport { ScreenStackHeaderBackButtonImage } from 'react-native-screens';\nvar invalid_login = 'Invalid Username or Password';\nvar internal_error = 'Internal Error: Unable to process request';\nexport function user_login(username, password) {\n  var login, encoded_username, encoded_password;\n  return _regeneratorRuntime.async(function user_login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          login = {\n            success: false,\n            err: ''\n          };\n\n          if (!(check_string(username) || check_string(password))) {\n            _context.next = 4;\n            break;\n          }\n\n          login.err = invalid_login;\n          return _context.abrupt(\"return\", login);\n\n        case 4:\n          encoded_username = base64.encode(username.trim());\n          encoded_password = base64.encode(password.trim());\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(fb.query_users([[\"username\", \"==\", encoded_username], [\"password\", \"==\", encoded_password]]).then(function (result) {\n            if (result.length == 1) {\n              login.success = true;\n            } else if (result.length != 0) {\n                console.error(\"Error duplicate users: \", result);\n              } else {\n                  login.err = invalid_login;\n                }\n          }).catch(function (error) {\n            console.error(\"Error querying user: \", error);\n            login.err = internal_error;\n          }));\n\n        case 8:\n          return _context.abrupt(\"return\", login);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function user_signup(username, password) {\n  var signup, encoded_username, encoded_password, user_doc;\n  return _regeneratorRuntime.async(function user_signup$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          signup = {\n            success: false,\n            err: ''\n          };\n\n          if (!(check_string(username) || check_string(password))) {\n            _context2.next = 4;\n            break;\n          }\n\n          signup.err = invalid_login;\n          return _context2.abrupt(\"return\", signup);\n\n        case 4:\n          encoded_username = base64.encode(username.trim());\n          encoded_password = base64.encode(password.trim());\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(fb.query_users([[\"username\", \"==\", encoded_username], [\"password\", \"==\", encoded_password]]).then(function (result) {\n            if (result.length != 0) {\n              signup.err = 'An account with this username already exists.';\n            } else {\n              console.log(result);\n            }\n          }).catch(function (error) {\n            console.error(\"Error querying user: \", error);\n            signup.err = internal_error;\n          }));\n\n        case 8:\n          if (!(signup.err != '')) {\n            _context2.next = 10;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", signup);\n\n        case 10:\n          user_doc = {\n            id: null,\n            data: {\n              \"username\": encoded_username,\n              \"password\": encoded_password\n            }\n          };\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(fb.add_users(user_doc).then(function (result) {\n            signup.success = result;\n          }).catch(function (error) {\n            console.error(\"Error adding user: \", error);\n            login.err = internal_error;\n          }));\n\n        case 13:\n          if (!signup.success) signup.err = internal_error;\n          return _context2.abrupt(\"return\", signup);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction check_string(str) {\n  var string = str.trim();\n  if (string.match(/[\\s]/)) return true;\n  if (string.length == 0) return true;\n  return false;\n}","map":{"version":3,"sources":["C:/Users/sanja/code/506/new/MealPlanner506/MealPlanner/backend/controller.js"],"names":["fb","base64","ScreenStackHeaderBackButtonImage","invalid_login","internal_error","user_login","username","password","login","success","err","check_string","encoded_username","encode","trim","encoded_password","query_users","then","result","length","console","error","catch","user_signup","signup","log","user_doc","id","data","add_users","str","string","match"],"mappings":"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","sourcesContent":["import * as fb from './firebase'\r\nimport base64 from 'base-64'\r\nimport { ScreenStackHeaderBackButtonImage } from 'react-native-screens';\r\n\r\nconst invalid_login = 'Invalid Username or Password';\r\nconst internal_error = 'Internal Error: Unable to process request';\r\n\r\n/**\r\n * Checks if the provided login information is valid\r\n * \r\n * @param {string} username \r\n * @param {string} password\r\n * \r\n * @returns Returns true if the login information is valid\r\n */\r\nexport async function user_login(username, password) {\r\n    var login = {success: false, err: ''};\r\n\r\n    // Check username and password format\r\n    if(check_string(username) || check_string(password)){\r\n        login.err = invalid_login;\r\n        return login;\r\n    }\r\n\r\n    // Encode username and password\r\n    var encoded_username = base64.encode(username.trim())\r\n    var encoded_password = base64.encode(password.trim())\r\n\r\n    // Search users collection for matching doc\r\n    await fb.query_users([[\"username\", \"==\", encoded_username],[\"password\", \"==\", encoded_password]])\r\n    .then(function(result) {\r\n        // A single match was found (successful login)\r\n        if(result.length == 1) {\r\n            login.success = true;\r\n        } \r\n        // Multiple matching user doc (VERY BAD!!)\r\n        else if (result.length != 0) {\r\n            console.error(\"Error duplicate users: \", result);\r\n        } \r\n        // No match was found (failed login)\r\n        else {\r\n            login.err = invalid_login;\r\n        }\r\n    })\r\n    .catch(function(error) {\r\n        console.error(\"Error querying user: \", error);\r\n        login.err = internal_error;\r\n    })\r\n\r\n    return login\r\n}\r\n\r\nexport async function user_signup(username, password) {\r\n    var signup = {success: false, err: ''};\r\n\r\n    // Check username and password format\r\n    if(check_string(username) || check_string(password)){\r\n        signup.err = invalid_login;\r\n        return signup;\r\n    }\r\n\r\n    // Encode username and password\r\n    var encoded_username = base64.encode(username.trim())\r\n    var encoded_password = base64.encode(password.trim())\r\n\r\n    // Check if user already exists\r\n    await fb.query_users([[\"username\", \"==\", encoded_username],[\"password\", \"==\", encoded_password]])\r\n    .then(function(result) {\r\n        if(result.length != 0) {\r\n            signup.err = 'An account with this username already exists.'\r\n        } else {\r\n\t\t\tconsole.log(result)\r\n\t\t}\r\n    })\r\n    .catch(function(error) {\r\n        console.error(\"Error querying user: \", error);\r\n        signup.err = internal_error;\r\n\t})\r\n\t\r\n\tif(signup.err != '') \r\n\t\treturn signup;\r\n\r\n    // Create user_doc to be added to users collection\r\n    var user_doc = {\r\n        id: null,\r\n        data: {\r\n            \"username\": encoded_username, \r\n            \"password\": encoded_password\r\n        }\r\n    }\r\n\r\n    // Add new doc with autogenerated ID\r\n    await fb.add_users(user_doc)\r\n    .then(function(result) {\r\n        signup.success = result;\r\n    })\r\n    .catch(function(error) {\r\n        console.error(\"Error adding user: \", error);\r\n        login.err = internal_error;\r\n    })\r\n\r\n    if(!signup.success)\r\n        signup.err = internal_error;\r\n\r\n    return signup;\r\n}\r\n\r\n\r\nfunction check_string(str) {\r\n    var string = str.trim();\r\n\r\n\tif(string.match(/[\\s]/)) \r\n\t\treturn true\r\n\t\r\n\tif(string.length == 0)\r\n\t\treturn true\r\n\r\n    return false\r\n}"]},"metadata":{},"sourceType":"module"}
import * as fb from './firebase'
import base64 from 'base-64'
import { ScreenStackHeaderBackButtonImage } from 'react-native-screens';

const invalid_login = 'Invalid Username or Password';
const internal_error = 'Internal Error: Unable to process request';

/**
 * Checks if the provided login information is valid
 * 
 * @param {string} username 
 * @param {string} password
 * 
 * @returns Returns true if the login information is valid
 */
export async function user_login(username, password) {
    var response = {success: false, err: ''};

    // Check username and password format
    if(check_string(username) || check_string(password)){
        response.err = invalid_login;
        return response;
    }

    // Encode username and password
    var encoded_username = base64.encode(username.trim())
    var encoded_password = base64.encode(password.trim())

    // Search users collection for matching doc
    await fb.query_collection([["username", "==", encoded_username],["password", "==", encoded_password]], "users")
    .then(function(result) {
        // A single match was found (successful login)
        if(result.length == 1) {
            response.success = true;
        } 
        // Multiple matching user doc (VERY BAD!!)
        else if (result.length != 0) {
            console.error("Error duplicate users: ", result);
        } 
        // No match was found (failed login)
        else {
            response.err = invalid_login;
        }
    })
    .catch(function(error) {
        console.error("Error querying user: ", error);
        response.err = internal_error;
    })

    return response
}

export async function user_signup(username, password) {
    var response = {success: false, err: ''};

    // Check username and password format
    if(check_string(username) || check_string(password)){
        response.err = invalid_login;
        return response;
    }

    // Encode username and password
    var encoded_username = base64.encode(username.trim())
    var encoded_password = base64.encode(password.trim())

    // Check if user already exists
    await fb.query_collection([["username", "==", encoded_username],["password", "==", encoded_password]], "users")
    .then(function(result) {
        if(result.length != 0) {
            response.err = 'An account with this username already exists.'
        } else {
		}
    })
    .catch(function(error) {
        console.error("Error querying user: ", error);
        response.err = internal_error;
	})
	
	if(response.err != '') 
		return response;

    // Create user_doc to be added to users collection
    var user_doc = {
        id: null,
        data: {
            "username": encoded_username, 
            "password": encoded_password,
            meals: []
        }
    }

    // Add new doc with autogenerated ID
    await fb.add_collection(user_doc.data, "users")
    .then(function(result) {
        response.success = result.success;
        user_doc.id = result.id;
    })
    .catch(function(error) {
        console.error("Error adding user: ", error);
        login.err = internal_error;
    })

    if(!response.success)
        response.err = internal_error;

    return response;
}

export async function add_meal(username, name, ingredients, steps, servings) {
    var response = {
        success: false,
        err: '',
        id: null
    };

    var user_doc = {};

    // Encode username and password
    var encoded_username = base64.encode(username)

    // Check if the users exits
    await fb.query_collection([["username", "==", encoded_username]], "users")
    .then(function(result) {
        if(result.length != 1) {
            response.err = 'The user could not be found';
            response.success = false;
        } else {
            response.success = true;
            user_doc = result[0];
        }
    })
    .catch(function(error) {
        console.error("Error querying user: ", error);
        response.err = internal_error;
        response.success = false;
    })
    
    if(!response.success) 
        return response;

    // Create the Meal Object

    var meal = {
        name: name,
        ingredients: ingredients,
        directions: steps,
        servings: servings ,
        username: encoded_username
    }

    // Add meal to the collection
    await fb.add_collection(meal, "meals")
    .then(function(result) {
        response.success = result.success;
        response.id = result.id;
    })
    .catch(function(error) {
        console.error("Error adding meal: ", error);
        response.err = internal_error;
        response.success = false;
    })

    if(!response.success)
        return response;

    // Add meal ID to user's list
    user_doc.data.meals.push(response.id)


    // Update user doc in collection
    await fb.update_collection(user_doc, "users")
    .then(function(result) {
        response.success = result.success;
    })
    .catch(function(error) {
        console.error("Error updating user meal list: ", error);
        response.err = internal_error;
        response.success = false;
    })

    return response;
}

export async function get_meals(username) {
    var response = {
        success: false, 
        err: '',
        meals: []
    };

    // Encode username and password
    var encoded_username = base64.encode(username.trim())

    // Search meals collection for meals attached to user
    await fb.query_collection([["username", "==", encoded_username]], "meals")
    .then(function(result) {
        // A single match was found (successful login)
        if(result.length == 0) {
            response.success = false;
            response.err = "No meals"
        } else {
            response.success = true;
            result.forEach(meal_doc => {
                var meal = {}
                meal.id = meal_doc.id;
                meal.name = meal_doc.data.name;
                meal.ingredients = meal_doc.data.ingredients.join(",");
                meal.steps = meal_doc.data.directions;
                meal.servings = meal_doc.data.servings;
                response.meals.push(meal);
            });
        }
    })
    .catch(function(error) {
        console.error("Error querying user meals: ", error);
        response.err = internal_error;
    })

    return response;
}

function check_string(str) {
    var string = str.trim();

	if(string.match(/[\s]/)) 
		return true
	
	if(string.length == 0)
		return true

    return false
}
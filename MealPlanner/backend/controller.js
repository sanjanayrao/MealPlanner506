import * as fb from './firebase'
import base64 from 'base-64'
import { ScreenStackHeaderBackButtonImage } from 'react-native-screens';

const invalid_login = 'Invalid Username or Password';
const internal_error = 'Internal Error: Unable to process request';

/**
 * Checks if the provided login information is valid
 * 
 * @param {string} username 
 * @param {string} password
 * 
 * @returns Returns true if the login information is valid
 */
export async function user_login(username, password) {
    var login = {success: false, err: ''};

    // Check username and password format
    if(check_string(username) || check_string(password)){
        login.err = invalid_login;
        return login;
    }

    // Encode username and password
    var encoded_username = base64.encode(username.trim())
    var encoded_password = base64.encode(password.trim())

    // Search users collection for matching doc
    await fb.query_users([["username", "==", encoded_username],["password", "==", encoded_password]])
    .then(function(result) {
        // A single match was found (successful login)
        if(result.length == 1) {
            login.success = true;
        } 
        // Multiple matching user doc (VERY BAD!!)
        else if (result.length != 0) {
            console.error("Error duplicate users: ", result);
        } 
        // No match was found (failed login)
        else {
            login.err = invalid_login;
        }
    })
    .catch(function(error) {
        console.error("Error querying user: ", error);
        login.err = internal_error;
    })

    return login
}

export async function user_signup(username, password) {
    var signup = {success: false, err: ''};

    // Check username and password format
    if(check_string(username) || check_string(password)){
        signup.err = invalid_login;
        return signup;
    }

    // Encode username and password
    var encoded_username = base64.encode(username.trim())
    var encoded_password = base64.encode(password.trim())

    // Check if user already exists
    await fb.query_users([["username", "==", encoded_username],["password", "==", encoded_password]])
    .then(function(result) {
        if(result.length != 0) {
            signup.err = 'An account with this username already exists.'
        } else {
			console.log(result)
		}
    })
    .catch(function(error) {
        console.error("Error querying user: ", error);
        signup.err = internal_error;
	})
	
	if(signup.err != '') 
		return signup;

    // Create user_doc to be added to users collection
    var user_doc = {
        id: null,
        data: {
            "username": encoded_username, 
            "password": encoded_password
        }
    }

    // Add new doc with autogenerated ID
    await fb.add_users(user_doc)
    .then(function(result) {
        signup.success = result;
    })
    .catch(function(error) {
        console.error("Error adding user: ", error);
        login.err = internal_error;
    })

    if(!signup.success)
        signup.err = internal_error;

    return signup;
}


function check_string(str) {
    var string = str.trim();

	if(string.match(/[\s]/)) 
		return true
	
	if(string.length == 0)
		return true

    return false
}